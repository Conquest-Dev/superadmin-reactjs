// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5Wyypaj28HpFwgqusnxkCW
// Component: l9aj5pWQjv7Z
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5Wyypaj28HpFwgqusnxkCW/projectcss
import sty from "./PlasmicSatistic.module.css"; // plasmic-import: l9aj5pWQjv7Z/css

createPlasmicElementProxy;

export const PlasmicSatistic__VariantProps = new Array();

export const PlasmicSatistic__ArgProps = new Array("unit", "number");

const $$ = {};

function PlasmicSatistic__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <div className={classNames(projectcss.all, sty.freeBox___969Q4)}>
            <p
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p__uvOiE
              )}
            >
              {"Machine Types"}
            </p>
          </div>
        ),

        value: args.unit
      })}
      <div className={classNames(projectcss.all, sty.freeBox___5NwEp)}>
        <div className={classNames(projectcss.all, sty.freeBox__f5JnA)}>
          {renderPlasmicSlot({
            defaultContents: (
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  sty.h2__nvNRk
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lHkd
                  )}
                >
                  {"NULL"}
                </div>
              </h2>
            ),

            value: args.number
          })}
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSatistic__ArgProps,
          internalVariantPropNames: PlasmicSatistic__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSatistic__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSatistic";
  } else {
    func.displayName = `PlasmicSatistic.${nodeName}`;
  }
  return func;
}

export const PlasmicSatistic = Object.assign(
  // Top-level PlasmicSatistic renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicSatistic
    internalVariantProps: PlasmicSatistic__VariantProps,
    internalArgProps: PlasmicSatistic__ArgProps
  }
);

export default PlasmicSatistic;
/* prettier-ignore-end */
