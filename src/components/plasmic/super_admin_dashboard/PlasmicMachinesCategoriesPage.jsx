// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5Wyypaj28HpFwgqusnxkCW
// Component: Gm8PiynKwc-M
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import PageLayout from "../../PageLayout"; // plasmic-import: aG693ljhigII/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5Wyypaj28HpFwgqusnxkCW/projectcss
import sty from "./PlasmicMachinesCategoriesPage.module.css"; // plasmic-import: Gm8PiynKwc-M/css

createPlasmicElementProxy;

export const PlasmicMachinesCategoriesPage__VariantProps = new Array();

export const PlasmicMachinesCategoriesPage__ArgProps = new Array();

const $$ = {};

function PlasmicMachinesCategoriesPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"machinesCategories"}
          data-plasmic-override={overrides.machinesCategories}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.machinesCategories
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <DataCtxReader__>
              {$ctx => (
                <section
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Device Categories"}
                  </h1>
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Content"}
                  </div>
                </section>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  machinesCategories: [
    "machinesCategories",
    "pageLayout",
    "section",
    "h1",
    "text"
  ],

  pageLayout: ["pageLayout", "section", "h1", "text"],
  section: ["section", "h1", "text"],
  h1: ["h1"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMachinesCategoriesPage__ArgProps,
          internalVariantPropNames: PlasmicMachinesCategoriesPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMachinesCategoriesPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "machinesCategories") {
    func.displayName = "PlasmicMachinesCategoriesPage";
  } else {
    func.displayName = `PlasmicMachinesCategoriesPage.${nodeName}`;
  }
  return func;
}

export const PlasmicMachinesCategoriesPage = Object.assign(
  // Top-level PlasmicMachinesCategoriesPage renders the root element
  makeNodeComponent("machinesCategories"),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicMachinesCategoriesPage
    internalVariantProps: PlasmicMachinesCategoriesPage__VariantProps,
    internalArgProps: PlasmicMachinesCategoriesPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "machines categories",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMachinesCategoriesPage;
/* prettier-ignore-end */
